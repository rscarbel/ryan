// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  seed     = "./seed.js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  EDITOR
  ADMIN
}

enum OAuthService {
  GOOGLE
  FACEBOOK
  TWITTER
}

enum SiteContentFormat {
  HTML
  MARKDOWN
  PLAIN_TEXT
}

enum WorkMode {
  onsite
  remote
  hybrid
}

enum ApplicationStatus {
  applied
  interview
  offer
  rejected
  accepted
  passed
}

enum PayFrequency {
  hourly
  weekly
  biweekly
  monthly
  yearly
}

model ApplicationCard {
  id                 Int               @id @default(autoincrement())
  applicationDate    DateTime?
  applicationLink    String?
  job                Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId              Int
  positionIndex      Int
  notes              String?
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             Int
  status             ApplicationStatus @default(applied)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @default(now()) @updatedAt
  applicationBoard   ApplicationBoard  @relation(fields: [applicationBoardId], references: [id], onDelete: Cascade)
  applicationBoardId Int
}

model Job {
  id             Int               @id @default(autoincrement())
  title          String
  description    String?
  workMode       WorkMode?
  company        Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId      Int
  applications   ApplicationCard[]
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  payAmountCents Int               @default(0)
  payFrequency   PayFrequency?     @default(hourly)
  currency       String?           @default("USD")
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @default(now()) @updatedAt
  address    Location    @relation(fields: [addressId], references: [id])
  addressId   Int

  @@unique([title, companyId, userId, workMode])
}

model ApplicationBoard {
  id               Int               @id @default(autoincrement())
  name             String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now()) @updatedAt
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           Int
  applicationCards ApplicationCard[]

  @@unique([name, userId])
}

model User {
  id                  Int                  @id @default(autoincrement())
  email               String               @unique
  passwordHash        String?
  firstName           String
  lastName            String
  roles               UserRole[]           @default([USER])
  oAuth               OAuth[]
  passwordResetTokens PasswordResetToken[]
  posts               Post[]
  comments            Comment[]
  edits               EditHistory[]        @relation("EditorToEditHistory")
  applications        ApplicationBoard[]
  companies           Company[]
  emailTemplates      EmailTemplate[]
  emails              Email[]
  contacts            Contact[]
  jobs                Job[]
  applicationCards    ApplicationCard[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now()) @updatedAt
  deletedAt           DateTime?
  addresses           Location[]
}

model Company {
  id         Int        @id @default(autoincrement())
  name       String
  contacts   Contact[]
  notes      String?
  sentEmails Email[]
  jobs       Job[]
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  locationId Int?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now()) @updatedAt
  address    Location    @relation(fields: [addressId], references: [id])
  addressId   Int

  @@unique([name, userId])
}

model Contact {
  id         Int                @id @default(autoincrement())
  firstName  String
  lastName   String
  phone      String?
  email      String?
  company    Company            @relation(fields: [companyId], references: [id])
  companyId  Int
  notes      String?
  sentEmails Email[]
  attributes ContactAttribute[]
  addresses  Location[]
  user       User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int

  @@unique([userId, firstName, lastName, email, companyId])
}

model ContactAttribute {
  id        Int     @id @default(autoincrement())
  name      String
  value     String
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId Int

  @@unique([name, contactId])
}

model Location {
  id                Int       @id @default(autoincrement())
  streetAddress     String?
  streetAddress2    String?
  city              String?
  state             String?
  country           String?   @default("United States")
  postalCode        String?
  companyLocationId Int?
  fromDate          DateTime  @default(now())
  throughDate       DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
  jobs               Job[]
  user              User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int?
  company           Company[]
  contact           Contact?  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId         Int?
}

model Email {
  id        Int        @id @default(autoincrement())
  subject   String
  body      String
  sentAt    DateTime   @default(now())
  opens     DateTime[]
  contact   Contact?   @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId Int?
  company   Company?   @relation(fields: [companyId], references: [id])
  companyId Int?
  user      User       @relation(fields: [userId], references: [id])
  userId    Int
}

model EmailTemplate {
  id      Int    @id @default(autoincrement())
  name    String
  subject String
  body    String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int

  @@unique([name, userId])
}

model SiteContent {
  id              Int                  @id @default(autoincrement())
  contentKey      String               @unique
  content         String
  format          SiteContentFormat    @default(PLAIN_TEXT)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @default(now()) @updatedAt
  siteContentHist SiteContentHistory[]

  @@index([updatedAt])
}

model SiteContentHistory {
  id          Int               @id @default(autoincrement())
  contentId   Int
  content     String
  format      SiteContentFormat
  createdAt   DateTime          @default(now())
  siteContent SiteContent       @relation(fields: [contentId], references: [id], onDelete: Cascade)
}

model OAuth {
  id         Int          @id @default(autoincrement())
  userId     Int
  provider   OAuthService
  externalId String
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, externalId, userId])
}

model Post {
  id          Int           @id @default(autoincrement())
  title       String
  content     String
  imageUrl    String?
  altText     String?
  tags        PostToTag[]
  metadata    Metadata[]
  editHistory EditHistory[]
  comments    Comment[]
  author      User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  deletedAt   DateTime?
}

model EditHistory {
  id          Int      @id @default(autoincrement())
  postId      Int
  editorId    Int
  diffTitle   String?
  diffContent String?
  createdAt   DateTime @default(now())
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  editor      User     @relation(fields: [editorId], references: [id], name: "EditorToEditHistory", onDelete: Cascade)
}

model Tag {
  id    Int         @id @default(autoincrement())
  name  String      @unique
  posts PostToTag[]
}

model PostToTag {
  postId Int
  tagId  Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
}

model Metadata {
  id     Int  @id @default(autoincrement())
  postId Int
  data   Json
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Comment {
  id              Int       @id @default(autoincrement())
  postId          Int
  userId          Int
  content         String
  parentCommentId Int?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt
  post            Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  author          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  deletedAt       DateTime?
}

model PasswordResetToken {
  id     Int      @id @default(autoincrement())
  userId Int
  token  String   @unique
  expiry DateTime
  used   Boolean  @default(false)
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
